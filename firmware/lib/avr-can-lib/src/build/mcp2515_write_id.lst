   1               		.file	"mcp2515_write_id.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.mcp2515_write_id,"ax",@progbits
  11               	.global	mcp2515_write_id
  13               	mcp2515_write_id:
  14               	.LFB21:
  15               		.file 1 "mcp2515_write_id.c"
   1:mcp2515_write_id.c **** // ----------------------------------------------------------------------------
   2:mcp2515_write_id.c **** /*
   3:mcp2515_write_id.c ****  * Copyright (c) 2007 Fabian Greif, Roboterclub Aachen e.V.
   4:mcp2515_write_id.c ****  *  All rights reserved.
   5:mcp2515_write_id.c ****  *
   6:mcp2515_write_id.c ****  * Redistribution and use in source and binary forms, with or without
   7:mcp2515_write_id.c ****  * modification, are permitted provided that the following conditions
   8:mcp2515_write_id.c ****  * are met:
   9:mcp2515_write_id.c ****  * 1. Redistributions of source code must retain the above copyright
  10:mcp2515_write_id.c ****  *    notice, this list of conditions and the following disclaimer.
  11:mcp2515_write_id.c ****  * 2. Redistributions in binary form must reproduce the above copyright
  12:mcp2515_write_id.c ****  *    notice, this list of conditions and the following disclaimer in the
  13:mcp2515_write_id.c ****  *    documentation and/or other materials provided with the distribution.
  14:mcp2515_write_id.c ****  *
  15:mcp2515_write_id.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
  16:mcp2515_write_id.c ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  17:mcp2515_write_id.c ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  18:mcp2515_write_id.c ****  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
  19:mcp2515_write_id.c ****  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  20:mcp2515_write_id.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  21:mcp2515_write_id.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  22:mcp2515_write_id.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  23:mcp2515_write_id.c ****  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  24:mcp2515_write_id.c ****  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  25:mcp2515_write_id.c ****  * SUCH DAMAGE.
  26:mcp2515_write_id.c ****  *
  27:mcp2515_write_id.c ****  * $Id: mcp2515_write_id.c 6568 2008-06-16 13:56:26Z fabian $
  28:mcp2515_write_id.c ****  */
  29:mcp2515_write_id.c **** // ----------------------------------------------------------------------------
  30:mcp2515_write_id.c **** 
  31:mcp2515_write_id.c **** #include "mcp2515_private.h"
  32:mcp2515_write_id.c **** #ifdef	SUPPORT_FOR_MCP2515__
  33:mcp2515_write_id.c **** 
  34:mcp2515_write_id.c **** // ----------------------------------------------------------------------------
  35:mcp2515_write_id.c **** #ifdef USE_SOFTWARE_SPI
  36:mcp2515_write_id.c **** 
  37:mcp2515_write_id.c **** static uint8_t usi_interface_spi_temp;
  38:mcp2515_write_id.c **** 
  39:mcp2515_write_id.c **** static void spi_start(uint8_t data) {
  40:mcp2515_write_id.c **** 	usi_interface_spi_temp = spi_putc(data);
  41:mcp2515_write_id.c **** }
  42:mcp2515_write_id.c **** 
  43:mcp2515_write_id.c **** static uint8_t spi_wait(void) {
  44:mcp2515_write_id.c **** 	return usi_interface_spi_temp;
  45:mcp2515_write_id.c **** }
  46:mcp2515_write_id.c **** 
  47:mcp2515_write_id.c **** #else
  48:mcp2515_write_id.c **** 
  49:mcp2515_write_id.c **** static void spi_start(uint8_t data) {
  50:mcp2515_write_id.c **** 	SPDR = data;
  51:mcp2515_write_id.c **** }
  52:mcp2515_write_id.c **** 
  53:mcp2515_write_id.c **** static uint8_t spi_wait(void) {
  54:mcp2515_write_id.c **** 	// warten bis der vorherige Werte geschrieben wurde
  55:mcp2515_write_id.c **** 	while(!(SPSR & (1<<SPIF)))
  56:mcp2515_write_id.c **** 		;
  57:mcp2515_write_id.c **** 	
  58:mcp2515_write_id.c **** 	return SPDR;
  59:mcp2515_write_id.c **** }
  60:mcp2515_write_id.c **** 
  61:mcp2515_write_id.c **** #endif
  62:mcp2515_write_id.c **** 
  63:mcp2515_write_id.c **** // ----------------------------------------------------------------------------
  64:mcp2515_write_id.c **** /* Schreibt eine CAN ID in die Register des MCP2515
  65:mcp2515_write_id.c ****  *
  66:mcp2515_write_id.c ****  * Die Funktion setzt eine offene Verbindung zum MCP2515 vorraus
  67:mcp2515_write_id.c ****  * und schreibt dann die CAN ID per SPI in die folgenden vier
  68:mcp2515_write_id.c ****  * Register des MCP2515.
  69:mcp2515_write_id.c ****  *
  70:mcp2515_write_id.c ****  * ACHTUNG: die Funktion wurde "optimiert", damit nicht ständig unnötige
  71:mcp2515_write_id.c ****  * 			32-Bit Operationen verwendet werden :)
  72:mcp2515_write_id.c ****  *
  73:mcp2515_write_id.c ****  * Funktionell aequivalent zu:
  74:mcp2515_write_id.c ****  *
  75:mcp2515_write_id.c ****  *	static void mcp2515_write_id(uint32_t *id, uint8_t extended)
  76:mcp2515_write_id.c ****  *	{
  77:mcp2515_write_id.c ****  *		if (extended) {
  78:mcp2515_write_id.c ****  *			spi_putc(*id >> 21);
  79:mcp2515_write_id.c ****  *			spi_putc(((*id >> 13) & 0xe0) | (1<<IDE) | ((*id >> 16) & 0x3));
  80:mcp2515_write_id.c ****  *			spi_putc(*id >> 8);
  81:mcp2515_write_id.c ****  *			spi_putc(*id);
  82:mcp2515_write_id.c ****  *		}
  83:mcp2515_write_id.c ****  *		else {
  84:mcp2515_write_id.c ****  *			spi_putc(*id >> 3);
  85:mcp2515_write_id.c ****  *			spi_putc(*id << 5);
  86:mcp2515_write_id.c ****  *			spi_putc(0);
  87:mcp2515_write_id.c ****  *			spi_putc(0);
  88:mcp2515_write_id.c ****  *		}
  89:mcp2515_write_id.c ****  *	}
  90:mcp2515_write_id.c ****  */
  91:mcp2515_write_id.c **** 
  92:mcp2515_write_id.c **** #if SUPPORT_EXTENDED_CANID
  93:mcp2515_write_id.c **** 
  94:mcp2515_write_id.c **** void mcp2515_write_id(const uint32_t *id, uint8_t extended)
  95:mcp2515_write_id.c **** {
  96:mcp2515_write_id.c **** 	uint8_t tmp;
  97:mcp2515_write_id.c **** 	
  98:mcp2515_write_id.c **** 	if (extended) {
  99:mcp2515_write_id.c **** 		spi_start(*((uint16_t *) id + 1) >> 5);
 100:mcp2515_write_id.c **** 		
 101:mcp2515_write_id.c **** 		// naechsten Werte berechnen
 102:mcp2515_write_id.c **** 		tmp  = (*((uint8_t *) id + 2) << 3) & 0xe0;
 103:mcp2515_write_id.c **** 		tmp |= (1 << IDE);
 104:mcp2515_write_id.c **** 		tmp |= (*((uint8_t *) id + 2)) & 0x03;
 105:mcp2515_write_id.c **** 		
 106:mcp2515_write_id.c **** 		// warten bis der vorherige Werte geschrieben wurde
 107:mcp2515_write_id.c **** 		spi_wait();
 108:mcp2515_write_id.c **** 		
 109:mcp2515_write_id.c **** 		// restliche Werte schreiben
 110:mcp2515_write_id.c **** 		spi_putc(tmp);
 111:mcp2515_write_id.c **** 		spi_putc(*((uint8_t *) id + 1));
 112:mcp2515_write_id.c **** 		spi_putc(*((uint8_t *) id));
 113:mcp2515_write_id.c **** 	}
 114:mcp2515_write_id.c **** 	else {
 115:mcp2515_write_id.c **** 		spi_start(*((uint16_t *) id) >> 3);
 116:mcp2515_write_id.c **** 		
 117:mcp2515_write_id.c **** 		// naechsten Werte berechnen
 118:mcp2515_write_id.c **** 		tmp = *((uint8_t *) id) << 5;
 119:mcp2515_write_id.c **** 		spi_wait();
 120:mcp2515_write_id.c **** 		
 121:mcp2515_write_id.c **** 		spi_putc(tmp);
 122:mcp2515_write_id.c **** 		spi_putc(0);
 123:mcp2515_write_id.c **** 		spi_putc(0);
 124:mcp2515_write_id.c **** 	}
 125:mcp2515_write_id.c **** }
 126:mcp2515_write_id.c **** 
 127:mcp2515_write_id.c **** #else
 128:mcp2515_write_id.c **** 
 129:mcp2515_write_id.c **** void mcp2515_write_id(const uint16_t *id)
 130:mcp2515_write_id.c **** {
  16               		.loc 1 130 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 131:mcp2515_write_id.c **** 	uint8_t tmp;
 132:mcp2515_write_id.c **** 	
 133:mcp2515_write_id.c **** 	spi_start(*id >> 3);
  23               		.loc 1 133 0
  24 0000 FC01      		movw r30,r24
  25 0002 2081      		ld r18,Z
  26 0004 3181      		ldd r19,Z+1
  27 0006 83E0      		ldi r24,3
  28               		1:
  29 0008 3695      		lsr r19
  30 000a 2795      		ror r18
  31 000c 8A95      		dec r24
  32 000e 01F4      		brne 1b
  33               	.LVL1:
  34               	.LBB8:
  35               	.LBB9:
  50:mcp2515_write_id.c **** }
  36               		.loc 1 50 0
  37 0010 2EBD      		out 0x2e,r18
  38               	.LVL2:
  39               	.LBE9:
  40               	.LBE8:
 134:mcp2515_write_id.c **** 	tmp = *((uint8_t *) id) << 5;
  41               		.loc 1 134 0
  42 0012 8081      		ld r24,Z
  43 0014 8295      		swap r24
  44 0016 880F      		lsl r24
  45 0018 807E      		andi r24,lo8(-32)
  46               	.LVL3:
  47               	.L2:
  48               	.LBB10:
  49               	.LBB11:
  55:mcp2515_write_id.c **** 		;
  50               		.loc 1 55 0
  51 001a 0DB4      		in __tmp_reg__,0x2d
  52 001c 07FE      		sbrs __tmp_reg__,7
  53 001e 00C0      		rjmp .L2
  58:mcp2515_write_id.c **** }
  54               		.loc 1 58 0
  55 0020 9EB5      		in r25,0x2e
  56               	.LBE11:
  57               	.LBE10:
 135:mcp2515_write_id.c **** 	spi_wait();
 136:mcp2515_write_id.c **** 	
 137:mcp2515_write_id.c **** 	spi_putc(tmp);
  58               		.loc 1 137 0
  59 0022 0E94 0000 		call spi_putc
  60               	.LVL4:
 138:mcp2515_write_id.c **** 	spi_putc(0);
  61               		.loc 1 138 0
  62 0026 80E0      		ldi r24,0
  63 0028 0E94 0000 		call spi_putc
  64               	.LVL5:
 139:mcp2515_write_id.c **** 	spi_putc(0);
  65               		.loc 1 139 0
  66 002c 80E0      		ldi r24,0
  67 002e 0E94 0000 		call spi_putc
  68               	.LVL6:
  69               	/* epilogue start */
 140:mcp2515_write_id.c **** }
  70               		.loc 1 140 0
  71 0032 0895      		ret
  72               		.cfi_endproc
  73               	.LFE21:
  75               		.text
  76               	.Letext0:
  77               		.file 2 "/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-ardui
  78               		.file 3 "spi.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 mcp2515_write_id.c
     /tmp/cczSHxNt.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cczSHxNt.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cczSHxNt.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cczSHxNt.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cczSHxNt.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cczSHxNt.s:13     .text.mcp2515_write_id:0000000000000000 mcp2515_write_id

UNDEFINED SYMBOLS
spi_putc
