   1               		.file	"mcp2515.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.mcp2515_write_register,"ax",@progbits
  11               	.global	mcp2515_write_register
  13               	mcp2515_write_register:
  14               	.LFB19:
  15               		.file 1 "mcp2515.c"
   1:mcp2515.c     **** // coding: utf-8
   2:mcp2515.c     **** // ----------------------------------------------------------------------------
   3:mcp2515.c     **** /*
   4:mcp2515.c     ****  * Copyright (c) 2007 Fabian Greif, Roboterclub Aachen e.V.
   5:mcp2515.c     ****  *  All rights reserved.
   6:mcp2515.c     ****  *
   7:mcp2515.c     ****  * Redistribution and use in source and binary forms, with or without
   8:mcp2515.c     ****  * modification, are permitted provided that the following conditions
   9:mcp2515.c     ****  * are met:
  10:mcp2515.c     ****  * 1. Redistributions of source code must retain the above copyright
  11:mcp2515.c     ****  *    notice, this list of conditions and the following disclaimer.
  12:mcp2515.c     ****  * 2. Redistributions in binary form must reproduce the above copyright
  13:mcp2515.c     ****  *    notice, this list of conditions and the following disclaimer in the
  14:mcp2515.c     ****  *    documentation and/or other materials provided with the distribution.
  15:mcp2515.c     ****  *
  16:mcp2515.c     ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
  17:mcp2515.c     ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  18:mcp2515.c     ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  19:mcp2515.c     ****  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
  20:mcp2515.c     ****  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  21:mcp2515.c     ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  22:mcp2515.c     ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  23:mcp2515.c     ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  24:mcp2515.c     ****  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  25:mcp2515.c     ****  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  26:mcp2515.c     ****  * SUCH DAMAGE.
  27:mcp2515.c     ****  *
  28:mcp2515.c     ****  * $Id: mcp2515.c 8086 2009-07-14 14:08:25Z fabian $
  29:mcp2515.c     ****  */
  30:mcp2515.c     **** // ----------------------------------------------------------------------------
  31:mcp2515.c     **** /* ---- Beispiel zum Einstellen des Bit Timings ----
  32:mcp2515.c     ****  *	
  33:mcp2515.c     ****  *	Fosc		= 16MHz
  34:mcp2515.c     ****  *	BRP			= 7
  35:mcp2515.c     ****  *	TQ 			= 2 * (BRP + 1) / Fosc
  36:mcp2515.c     ****  *				= 1 uS
  37:mcp2515.c     ****  *
  38:mcp2515.c     ****  *	Sync Seg	= 					= 1 TQ
  39:mcp2515.c     ****  *	Prop Seg	= (PRSEG + 1) * TQ	= 1 TQ
  40:mcp2515.c     ****  *	Phase Seg1	= (PHSEG1 + 1) * TQ	= 3 TQ
  41:mcp2515.c     ****  *	Phase Seg2	= (PHSEG2 + 1) * TQ = 3 TQ
  42:mcp2515.c     ****  *									--------
  43:mcp2515.c     ****  *									  8 TQ
  44:mcp2515.c     ****  *	
  45:mcp2515.c     ****  *	Bus speed	= 1 / ((Total # of TQ) * TQ)
  46:mcp2515.c     ****  *				= 1 / (8 * TQ) = 125 kHz
  47:mcp2515.c     ****  */
  48:mcp2515.c     **** // -------------------------------------------------------------------------
  49:mcp2515.c     **** 
  50:mcp2515.c     **** #include "mcp2515_private.h"
  51:mcp2515.c     **** #ifdef	SUPPORT_FOR_MCP2515__
  52:mcp2515.c     **** 
  53:mcp2515.c     **** #ifndef	MCP2515_CLKOUT_PRESCALER
  54:mcp2515.c     **** 	#error	MCP2515_CLKOUT_PRESCALER not defined!
  55:mcp2515.c     **** #elif MCP2515_CLKOUT_PRESCALER == 0
  56:mcp2515.c     **** 	#define	CLKOUT_PRESCALER_	0x0
  57:mcp2515.c     **** #elif MCP2515_CLKOUT_PRESCALER == 1
  58:mcp2515.c     **** 	#define	CLKOUT_PRESCALER_	0x4
  59:mcp2515.c     **** #elif MCP2515_CLKOUT_PRESCALER == 2
  60:mcp2515.c     **** 	#define	CLKOUT_PRESCALER_	0x5
  61:mcp2515.c     **** #elif MCP2515_CLKOUT_PRESCALER == 4
  62:mcp2515.c     **** 	#define	CLKOUT_PRESCALER_	0x6
  63:mcp2515.c     **** #elif MCP2515_CLKOUT_PRESCALER == 8
  64:mcp2515.c     **** 	#define	CLKOUT_PRESCALER_	0x7
  65:mcp2515.c     **** #else
  66:mcp2515.c     **** 	#error	invaild value of MCP2515_CLKOUT_PRESCALER
  67:mcp2515.c     **** #endif
  68:mcp2515.c     **** 
  69:mcp2515.c     **** // -------------------------------------------------------------------------
  70:mcp2515.c     **** void mcp2515_write_register( uint8_t adress, uint8_t data )
  71:mcp2515.c     **** {
  16               		.loc 1 71 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 2 */
  30               	.L__stack_usage = 2
  31 0004 D82F      		mov r29,r24
  32 0006 C62F      		mov r28,r22
  72:mcp2515.c     **** 	RESET(MCP2515_CS);
  33               		.loc 1 72 0
  34 0008 2A98      		cbi 0x5,2
  73:mcp2515.c     **** 	
  74:mcp2515.c     **** 	spi_putc(SPI_WRITE);
  35               		.loc 1 74 0
  36 000a 82E0      		ldi r24,lo8(2)
  37               	.LVL1:
  38 000c 0E94 0000 		call spi_putc
  39               	.LVL2:
  75:mcp2515.c     **** 	spi_putc(adress);
  40               		.loc 1 75 0
  41 0010 8D2F      		mov r24,r29
  42 0012 0E94 0000 		call spi_putc
  43               	.LVL3:
  76:mcp2515.c     **** 	spi_putc(data);
  44               		.loc 1 76 0
  45 0016 8C2F      		mov r24,r28
  46 0018 0E94 0000 		call spi_putc
  47               	.LVL4:
  77:mcp2515.c     **** 	
  78:mcp2515.c     **** 	SET(MCP2515_CS);
  48               		.loc 1 78 0
  49 001c 2A9A      		sbi 0x5,2
  50               	/* epilogue start */
  79:mcp2515.c     **** }
  51               		.loc 1 79 0
  52 001e DF91      		pop r29
  53               	.LVL5:
  54 0020 CF91      		pop r28
  55               	.LVL6:
  56 0022 0895      		ret
  57               		.cfi_endproc
  58               	.LFE19:
  60               		.section	.text.mcp2515_read_register,"ax",@progbits
  61               	.global	mcp2515_read_register
  63               	mcp2515_read_register:
  64               	.LFB20:
  80:mcp2515.c     **** 
  81:mcp2515.c     **** // -------------------------------------------------------------------------
  82:mcp2515.c     **** uint8_t mcp2515_read_register(uint8_t adress)
  83:mcp2515.c     **** {
  65               		.loc 1 83 0
  66               		.cfi_startproc
  67               	.LVL7:
  68 0000 CF93      		push r28
  69               	.LCFI2:
  70               		.cfi_def_cfa_offset 3
  71               		.cfi_offset 28, -2
  72               	/* prologue: function */
  73               	/* frame size = 0 */
  74               	/* stack size = 1 */
  75               	.L__stack_usage = 1
  76 0002 C82F      		mov r28,r24
  84:mcp2515.c     **** 	uint8_t data;
  85:mcp2515.c     **** 	
  86:mcp2515.c     **** 	RESET(MCP2515_CS);
  77               		.loc 1 86 0
  78 0004 2A98      		cbi 0x5,2
  87:mcp2515.c     **** 	
  88:mcp2515.c     **** 	spi_putc(SPI_READ);
  79               		.loc 1 88 0
  80 0006 83E0      		ldi r24,lo8(3)
  81               	.LVL8:
  82 0008 0E94 0000 		call spi_putc
  83               	.LVL9:
  89:mcp2515.c     **** 	spi_putc(adress);
  84               		.loc 1 89 0
  85 000c 8C2F      		mov r24,r28
  86 000e 0E94 0000 		call spi_putc
  87               	.LVL10:
  90:mcp2515.c     **** 	
  91:mcp2515.c     **** 	data = spi_putc(0xff);	
  88               		.loc 1 91 0
  89 0012 8FEF      		ldi r24,lo8(-1)
  90 0014 0E94 0000 		call spi_putc
  91               	.LVL11:
  92:mcp2515.c     **** 	
  93:mcp2515.c     **** 	SET(MCP2515_CS);
  92               		.loc 1 93 0
  93 0018 2A9A      		sbi 0x5,2
  94               	/* epilogue start */
  94:mcp2515.c     **** 	
  95:mcp2515.c     **** 	return data;
  96:mcp2515.c     **** }
  95               		.loc 1 96 0
  96 001a CF91      		pop r28
  97               	.LVL12:
  98 001c 0895      		ret
  99               		.cfi_endproc
 100               	.LFE20:
 102               		.section	.text.mcp2515_bit_modify,"ax",@progbits
 103               	.global	mcp2515_bit_modify
 105               	mcp2515_bit_modify:
 106               	.LFB21:
  97:mcp2515.c     **** 
  98:mcp2515.c     **** // -------------------------------------------------------------------------
  99:mcp2515.c     **** void mcp2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data)
 100:mcp2515.c     **** {
 107               		.loc 1 100 0
 108               		.cfi_startproc
 109               	.LVL13:
 110 0000 1F93      		push r17
 111               	.LCFI3:
 112               		.cfi_def_cfa_offset 3
 113               		.cfi_offset 17, -2
 114 0002 CF93      		push r28
 115               	.LCFI4:
 116               		.cfi_def_cfa_offset 4
 117               		.cfi_offset 28, -3
 118 0004 DF93      		push r29
 119               	.LCFI5:
 120               		.cfi_def_cfa_offset 5
 121               		.cfi_offset 29, -4
 122               	/* prologue: function */
 123               	/* frame size = 0 */
 124               	/* stack size = 3 */
 125               	.L__stack_usage = 3
 126 0006 182F      		mov r17,r24
 127 0008 D62F      		mov r29,r22
 128 000a C42F      		mov r28,r20
 101:mcp2515.c     **** 	RESET(MCP2515_CS);
 129               		.loc 1 101 0
 130 000c 2A98      		cbi 0x5,2
 102:mcp2515.c     **** 	
 103:mcp2515.c     **** 	spi_putc(SPI_BIT_MODIFY);
 131               		.loc 1 103 0
 132 000e 85E0      		ldi r24,lo8(5)
 133               	.LVL14:
 134 0010 0E94 0000 		call spi_putc
 135               	.LVL15:
 104:mcp2515.c     **** 	spi_putc(adress);
 136               		.loc 1 104 0
 137 0014 812F      		mov r24,r17
 138 0016 0E94 0000 		call spi_putc
 139               	.LVL16:
 105:mcp2515.c     **** 	spi_putc(mask);
 140               		.loc 1 105 0
 141 001a 8D2F      		mov r24,r29
 142 001c 0E94 0000 		call spi_putc
 143               	.LVL17:
 106:mcp2515.c     **** 	spi_putc(data);
 144               		.loc 1 106 0
 145 0020 8C2F      		mov r24,r28
 146 0022 0E94 0000 		call spi_putc
 147               	.LVL18:
 107:mcp2515.c     **** 	
 108:mcp2515.c     **** 	SET(MCP2515_CS);
 148               		.loc 1 108 0
 149 0026 2A9A      		sbi 0x5,2
 150               	/* epilogue start */
 109:mcp2515.c     **** }
 151               		.loc 1 109 0
 152 0028 DF91      		pop r29
 153               	.LVL19:
 154 002a CF91      		pop r28
 155               	.LVL20:
 156 002c 1F91      		pop r17
 157               	.LVL21:
 158 002e 0895      		ret
 159               		.cfi_endproc
 160               	.LFE21:
 162               		.section	.text.mcp2515_read_status,"ax",@progbits
 163               	.global	mcp2515_read_status
 165               	mcp2515_read_status:
 166               	.LFB22:
 110:mcp2515.c     **** 
 111:mcp2515.c     **** // ----------------------------------------------------------------------------
 112:mcp2515.c     **** uint8_t mcp2515_read_status(uint8_t type)
 113:mcp2515.c     **** {
 167               		.loc 1 113 0
 168               		.cfi_startproc
 169               	.LVL22:
 170               	/* prologue: function */
 171               	/* frame size = 0 */
 172               	/* stack size = 0 */
 173               	.L__stack_usage = 0
 114:mcp2515.c     **** 	uint8_t data;
 115:mcp2515.c     **** 	
 116:mcp2515.c     **** 	RESET(MCP2515_CS);
 174               		.loc 1 116 0
 175 0000 2A98      		cbi 0x5,2
 117:mcp2515.c     **** 	
 118:mcp2515.c     **** 	spi_putc(type);
 176               		.loc 1 118 0
 177 0002 0E94 0000 		call spi_putc
 178               	.LVL23:
 119:mcp2515.c     **** 	data = spi_putc(0xff);
 179               		.loc 1 119 0
 180 0006 8FEF      		ldi r24,lo8(-1)
 181 0008 0E94 0000 		call spi_putc
 182               	.LVL24:
 120:mcp2515.c     **** 	
 121:mcp2515.c     **** 	SET(MCP2515_CS);
 183               		.loc 1 121 0
 184 000c 2A9A      		sbi 0x5,2
 185               	/* epilogue start */
 122:mcp2515.c     **** 	
 123:mcp2515.c     **** 	return data;
 124:mcp2515.c     **** }
 186               		.loc 1 124 0
 187 000e 0895      		ret
 188               		.cfi_endproc
 189               	.LFE22:
 191               		.section	.text.can_init,"ax",@progbits
 192               	.global	can_init
 194               	can_init:
 195               	.LFB23:
 125:mcp2515.c     **** 
 126:mcp2515.c     **** // -------------------------------------------------------------------------
 127:mcp2515.c     **** 
 128:mcp2515.c     **** const uint8_t _mcp2515_cnf[8][3] PROGMEM = {
 129:mcp2515.c     **** 	// 10 kbps
 130:mcp2515.c     **** 	{	0x04,
 131:mcp2515.c     **** 		0xb6,
 132:mcp2515.c     **** 		0xe7
 133:mcp2515.c     **** 	},
 134:mcp2515.c     **** 	// 20 kbps
 135:mcp2515.c     **** 	{	0x04,
 136:mcp2515.c     **** 		0xb6,
 137:mcp2515.c     **** 		0xd3
 138:mcp2515.c     **** 	},
 139:mcp2515.c     **** 	// 50 kbps
 140:mcp2515.c     **** 	{	0x04,
 141:mcp2515.c     **** 		0xb6,
 142:mcp2515.c     **** 		0xc7
 143:mcp2515.c     **** 	},
 144:mcp2515.c     **** 	// 100 kbps
 145:mcp2515.c     **** 	{	0x04,
 146:mcp2515.c     **** 		0xb6,
 147:mcp2515.c     **** 		0xc3
 148:mcp2515.c     **** 	},
 149:mcp2515.c     **** 	// 125 kbps
 150:mcp2515.c     **** 	{	(1<<PHSEG21),					// CNF3
 151:mcp2515.c     **** 		(1<<BTLMODE)|(1<<PHSEG11),		// CNF2
 152:mcp2515.c     **** 		(1<<BRP2)|(1<<BRP1)|(1<<BRP0)	// CNF1
 153:mcp2515.c     **** 	},
 154:mcp2515.c     **** 	// 250 kbps
 155:mcp2515.c     **** 	{	0x03,
 156:mcp2515.c     **** 		0xac,
 157:mcp2515.c     **** 		0x81
 158:mcp2515.c     **** 	},
 159:mcp2515.c     **** 	// 500 kbps
 160:mcp2515.c     **** 	{	0x03,
 161:mcp2515.c     **** 		0xac,
 162:mcp2515.c     **** 		0x80
 163:mcp2515.c     **** 	},
 164:mcp2515.c     **** 	// 1 Mbps
 165:mcp2515.c     **** 	{	(1<<PHSEG21),
 166:mcp2515.c     **** 		(1<<BTLMODE)|(1<<PHSEG11),
 167:mcp2515.c     **** 		0
 168:mcp2515.c     **** 	}
 169:mcp2515.c     **** };
 170:mcp2515.c     **** 
 171:mcp2515.c     **** // -------------------------------------------------------------------------
 172:mcp2515.c     **** bool mcp2515_init(can_bitrate_t bitrate)
 173:mcp2515.c     **** {
 196               		.loc 1 173 0
 197               		.cfi_startproc
 198               	.LVL25:
 199 0000 EF92      		push r14
 200               	.LCFI6:
 201               		.cfi_def_cfa_offset 3
 202               		.cfi_offset 14, -2
 203 0002 FF92      		push r15
 204               	.LCFI7:
 205               		.cfi_def_cfa_offset 4
 206               		.cfi_offset 15, -3
 207 0004 0F93      		push r16
 208               	.LCFI8:
 209               		.cfi_def_cfa_offset 5
 210               		.cfi_offset 16, -4
 211 0006 1F93      		push r17
 212               	.LCFI9:
 213               		.cfi_def_cfa_offset 6
 214               		.cfi_offset 17, -5
 215 0008 CF93      		push r28
 216               	.LCFI10:
 217               		.cfi_def_cfa_offset 7
 218               		.cfi_offset 28, -6
 219 000a DF93      		push r29
 220               	.LCFI11:
 221               		.cfi_def_cfa_offset 8
 222               		.cfi_offset 29, -7
 223               	/* prologue: function */
 224               	/* frame size = 0 */
 225               	/* stack size = 6 */
 226               	.L__stack_usage = 6
 174:mcp2515.c     **** 	if (bitrate >= 8)
 227               		.loc 1 174 0
 228 000c 8830      		cpi r24,lo8(8)
 229 000e 00F0      		brlo .+2
 230 0010 00C0      		rjmp .L6
 231 0012 C82F      		mov r28,r24
 175:mcp2515.c     **** 		return false;
 176:mcp2515.c     **** 	
 177:mcp2515.c     **** 	SET(MCP2515_CS);
 232               		.loc 1 177 0
 233 0014 2A9A      		sbi 0x5,2
 178:mcp2515.c     **** 	SET_OUTPUT(MCP2515_CS);
 234               		.loc 1 178 0
 235 0016 229A      		sbi 0x4,2
 179:mcp2515.c     **** 	
 180:mcp2515.c     **** 	// Aktivieren der Pins fuer das SPI Interface
 181:mcp2515.c     **** 	RESET(P_SCK);
 236               		.loc 1 181 0
 237 0018 2D98      		cbi 0x5,5
 182:mcp2515.c     **** 	RESET(P_MOSI);
 238               		.loc 1 182 0
 239 001a 2B98      		cbi 0x5,3
 183:mcp2515.c     **** 	RESET(P_MISO);
 240               		.loc 1 183 0
 241 001c 2C98      		cbi 0x5,4
 184:mcp2515.c     **** 	
 185:mcp2515.c     **** 	SET_OUTPUT(P_SCK);
 242               		.loc 1 185 0
 243 001e 259A      		sbi 0x4,5
 186:mcp2515.c     **** 	SET_OUTPUT(P_MOSI);
 244               		.loc 1 186 0
 245 0020 239A      		sbi 0x4,3
 187:mcp2515.c     **** 	SET_INPUT(P_MISO);
 246               		.loc 1 187 0
 247 0022 2498      		cbi 0x4,4
 188:mcp2515.c     **** 	
 189:mcp2515.c     **** 	// SPI Einstellung setzen
 190:mcp2515.c     **** 	mcp2515_spi_init();
 248               		.loc 1 190 0
 249 0024 0E94 0000 		call mcp2515_spi_init
 250               	.LVL26:
 191:mcp2515.c     **** 	
 192:mcp2515.c     **** 	// MCP2515 per Software Reset zuruecksetzten,
 193:mcp2515.c     **** 	// danach ist er automatisch im Konfigurations Modus
 194:mcp2515.c     **** 	RESET(MCP2515_CS);
 251               		.loc 1 194 0
 252 0028 2A98      		cbi 0x5,2
 195:mcp2515.c     **** 	spi_putc(SPI_RESET);
 253               		.loc 1 195 0
 254 002a 80EC      		ldi r24,lo8(-64)
 255 002c 0E94 0000 		call spi_putc
 256               	.LVL27:
 257               	.LBB21:
 258               	.LBB22:
 259               	.LBB23:
 260               	.LBB24:
 261               		.file 2 "/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-ardui
   1:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****    All rights reserved.
   4:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 
   5:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 
   8:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 
  11:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****      distribution.
  15:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 
  16:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 
  20:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 
  32:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** /* $Id$ */
  33:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 
  34:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 
  37:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 
  39:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  40:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** static __inline__ void _delay_loop_1(uint8_t __count) __attribute__((__always_inline__));
  41:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** static __inline__ void _delay_loop_2(uint16_t __count) __attribute__((__always_inline__));
  42:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** #endif
  43:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 
  44:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** /** \file */
  45:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  46:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     \code
  47:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  48:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     \endcode
  49:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 
  50:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  51:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  52:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  53:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  54:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  55:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  56:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  57:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 
  58:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  59:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  60:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  61:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  62:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  63:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     to the overall delay time.
  64:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 
  65:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  66:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 
  67:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** */
  68:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 
  69:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 
  71:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     register.
  76:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 
  77:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     can be achieved.
  79:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** */
  80:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** void
  81:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** {
  83:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 		"brne 1b"
  86:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 	);
  89:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** }
  90:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 
  91:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 
  93:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     counter register pair.
  98:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 
  99:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h ****  */
 102:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** void
 103:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** {
 105:/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay_basic.h **** 	__asm__ volatile (
 262               		.loc 2 105 0
 263 0030 80EA      		ldi r24,lo8(-96)
 264 0032 9FE0      		ldi r25,lo8(15)
 265               	/* #APP */
 266               	 ;  105 "/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduin
 267 0034 0197      		1: sbiw r24,1
 268 0036 01F4      		brne 1b
 269               	 ;  0 "" 2
 270               	.LVL28:
 271               	/* #NOAPP */
 272               	.LBE24:
 273               	.LBE23:
 274               	.LBE22:
 275               	.LBE21:
 196:mcp2515.c     **** 	
 197:mcp2515.c     **** 	_delay_ms(1);
 198:mcp2515.c     **** 	
 199:mcp2515.c     **** 	SET(MCP2515_CS);
 276               		.loc 1 199 0
 277 0038 2A9A      		sbi 0x5,2
 278               	.LVL29:
 279               	.LBB25:
 280               	.LBB26:
 281               	.LBB27:
 282               	.LBB28:
 283               		.loc 2 105 0
 284 003a 80E4      		ldi r24,lo8(64)
 285 003c 9CE9      		ldi r25,lo8(-100)
 286               	/* #APP */
 287               	 ;  105 "/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduin
 288 003e 0197      		1: sbiw r24,1
 289 0040 01F4      		brne 1b
 290               	 ;  0 "" 2
 291               	.LVL30:
 292               	/* #NOAPP */
 293               	.LBE28:
 294               	.LBE27:
 295               	.LBE26:
 296               	.LBE25:
 200:mcp2515.c     **** 	
 201:mcp2515.c     **** 	// ein bisschen warten bis der MCP2515 sich neu gestartet hat
 202:mcp2515.c     **** 	_delay_ms(10);
 203:mcp2515.c     **** 	
 204:mcp2515.c     **** 	// CNF1..3 Register laden (Bittiming)
 205:mcp2515.c     **** 	RESET(MCP2515_CS);
 297               		.loc 1 205 0
 298 0042 2A98      		cbi 0x5,2
 206:mcp2515.c     **** 	spi_putc(SPI_WRITE);
 299               		.loc 1 206 0
 300 0044 82E0      		ldi r24,lo8(2)
 301 0046 0E94 0000 		call spi_putc
 302               	.LVL31:
 207:mcp2515.c     **** 	spi_putc(CNF3);
 303               		.loc 1 207 0
 304 004a 88E2      		ldi r24,lo8(40)
 305 004c 0E94 0000 		call spi_putc
 306               	.LVL32:
 307 0050 EC2F      		mov r30,r28
 308 0052 F0E0      		ldi r31,0
 309 0054 EF01      		movw r28,r30
 310               	.LVL33:
 311 0056 CC0F      		lsl r28
 312 0058 DD1F      		rol r29
 313 005a CE0F      		add r28,r30
 314 005c DF1F      		adc r29,r31
 315 005e 10E0      		ldi r17,0
 316 0060 00E0      		ldi r16,0
 317               	.LBB29:
 318               	.LBB30:
 208:mcp2515.c     **** 	for (uint8_t i=0; i<3 ;i++ ) {
 209:mcp2515.c     **** 		spi_putc(pgm_read_byte(&_mcp2515_cnf[bitrate][i]));
 319               		.loc 1 209 0
 320 0062 CE01      		movw r24,r28
 321 0064 8050      		subi r24,lo8(-(_mcp2515_cnf))
 322 0066 9040      		sbci r25,hi8(-(_mcp2515_cnf))
 323 0068 7C01      		movw r14,r24
 324               	.LVL34:
 325               	.L7:
 326               		.loc 1 209 0 is_stmt 0 discriminator 3
 327 006a F701      		movw r30,r14
 328 006c E00F      		add r30,r16
 329 006e F11F      		adc r31,r17
 330               	/* #APP */
 331               	 ;  209 "mcp2515.c" 1
 332 0070 8491      		lpm r24, Z
 333               		
 334               	 ;  0 "" 2
 335               	.LVL35:
 336               	/* #NOAPP */
 337               	.LBE30:
 338 0072 0E94 0000 		call spi_putc
 339               	.LVL36:
 340 0076 0F5F      		subi r16,-1
 341 0078 1F4F      		sbci r17,-1
 342               	.LVL37:
 208:mcp2515.c     **** 	for (uint8_t i=0; i<3 ;i++ ) {
 343               		.loc 1 208 0 is_stmt 1 discriminator 3
 344 007a 0330      		cpi r16,3
 345 007c 1105      		cpc r17,__zero_reg__
 346 007e 01F4      		brne .L7
 347               	.LBE29:
 210:mcp2515.c     **** 	}
 211:mcp2515.c     **** 	// aktivieren/deaktivieren der Interrupts
 212:mcp2515.c     **** 	spi_putc(MCP2515_INTERRUPTS);
 348               		.loc 1 212 0
 349 0080 83E0      		ldi r24,lo8(3)
 350 0082 0E94 0000 		call spi_putc
 351               	.LVL38:
 213:mcp2515.c     **** 	SET(MCP2515_CS);
 352               		.loc 1 213 0
 353 0086 2A9A      		sbi 0x5,2
 214:mcp2515.c     **** 	
 215:mcp2515.c     **** 	// TXnRTS Bits als Inputs schalten
 216:mcp2515.c     **** 	mcp2515_write_register(TXRTSCTRL, 0);
 354               		.loc 1 216 0
 355 0088 60E0      		ldi r22,0
 356 008a 8DE0      		ldi r24,lo8(13)
 357 008c 0E94 0000 		call mcp2515_write_register
 358               	.LVL39:
 217:mcp2515.c     **** 	
 218:mcp2515.c     **** 	#if defined(MCP2515_INT)
 219:mcp2515.c     **** 		SET_INPUT(MCP2515_INT);
 359               		.loc 1 219 0
 360 0090 2098      		cbi 0x4,0
 220:mcp2515.c     **** 		SET(MCP2515_INT);
 361               		.loc 1 220 0
 362 0092 289A      		sbi 0x5,0
 221:mcp2515.c     **** 	#endif
 222:mcp2515.c     **** 	
 223:mcp2515.c     **** 	#ifdef RXnBF_FUNKTION
 224:mcp2515.c     **** 		SET_INPUT(MCP2515_RX0BF);
 225:mcp2515.c     **** 		SET_INPUT(MCP2515_RX1BF);
 226:mcp2515.c     **** 		
 227:mcp2515.c     **** 		SET(MCP2515_RX0BF);
 228:mcp2515.c     **** 		SET(MCP2515_RX1BF);
 229:mcp2515.c     **** 		
 230:mcp2515.c     **** 		// Aktivieren der Pin-Funktionen fuer RX0BF und RX1BF
 231:mcp2515.c     **** 		mcp2515_write_register(BFPCTRL, (1<<B0BFE)|(1<<B1BFE)|(1<<B0BFM)|(1<<B1BFM));
 232:mcp2515.c     **** 	#else
 233:mcp2515.c     **** 		#ifdef MCP2515_TRANSCEIVER_SLEEP
 234:mcp2515.c     **** 			// activate the pin RX1BF as GPIO which is connected 
 235:mcp2515.c     **** 			// to RS of MCP2551 and set it to 0
 236:mcp2515.c     **** 			mcp2515_write_register(BFPCTRL, (1<<B1BFE));
 237:mcp2515.c     **** 		#else
 238:mcp2515.c     **** 			// Deaktivieren der Pins RXnBF Pins (High Impedance State)
 239:mcp2515.c     **** 			mcp2515_write_register(BFPCTRL, 0);
 363               		.loc 1 239 0
 364 0094 60E0      		ldi r22,0
 365 0096 8CE0      		ldi r24,lo8(12)
 366 0098 0E94 0000 		call mcp2515_write_register
 367               	.LVL40:
 240:mcp2515.c     **** 		#endif
 241:mcp2515.c     **** 	#endif
 242:mcp2515.c     **** 	
 243:mcp2515.c     **** 	// Testen ob das auf die beschreibenen Register zugegriffen werden kann
 244:mcp2515.c     **** 	// (=> ist der Chip ueberhaupt ansprechbar?)
 245:mcp2515.c     **** 	bool error = false;
 246:mcp2515.c     **** 	if (mcp2515_read_register(CNF2) != pgm_read_byte(&_mcp2515_cnf[bitrate][1])) {
 368               		.loc 1 246 0
 369 009c 89E2      		ldi r24,lo8(41)
 370 009e 0E94 0000 		call mcp2515_read_register
 371               	.LVL41:
 372 00a2 182F      		mov r17,r24
 373               	.LVL42:
 374               	.LBB31:
 375 00a4 C050      		subi r28,lo8(-(_mcp2515_cnf+1))
 376 00a6 D040      		sbci r29,hi8(-(_mcp2515_cnf+1))
 377               	.LVL43:
 378 00a8 FE01      		movw r30,r28
 379               	/* #APP */
 380               	 ;  246 "mcp2515.c" 1
 381 00aa C491      		lpm r28, Z
 382               		
 383               	 ;  0 "" 2
 384               	.LVL44:
 385               	/* #NOAPP */
 386               	.LBE31:
 247:mcp2515.c     **** 		error = true;
 248:mcp2515.c     **** 	}
 249:mcp2515.c     **** 	
 250:mcp2515.c     **** 	// Device zurueck in den normalen Modus versetzten
 251:mcp2515.c     **** 	// und aktivieren/deaktivieren des Clkout-Pins
 252:mcp2515.c     **** 	mcp2515_write_register(CANCTRL, CLKOUT_PRESCALER_);
 387               		.loc 1 252 0
 388 00ac 60E0      		ldi r22,0
 389 00ae 8FE0      		ldi r24,lo8(15)
 390 00b0 0E94 0000 		call mcp2515_write_register
 391               	.LVL45:
 253:mcp2515.c     **** 	
 254:mcp2515.c     **** 	if (error) {
 392               		.loc 1 254 0
 393 00b4 1C13      		cpse r17,r28
 394 00b6 00C0      		rjmp .L6
 395               	.L8:
 255:mcp2515.c     **** 		return false;
 256:mcp2515.c     **** 	}
 257:mcp2515.c     **** 	else
 258:mcp2515.c     **** 	{
 259:mcp2515.c     **** 		while ((mcp2515_read_register(CANSTAT) & 0xe0) != 0) {
 396               		.loc 1 259 0 discriminator 1
 397 00b8 8EE0      		ldi r24,lo8(14)
 398 00ba 0E94 0000 		call mcp2515_read_register
 399               	.LVL46:
 400 00be 807E      		andi r24,lo8(-32)
 401 00c0 01F4      		brne .L8
 260:mcp2515.c     **** 			// warten bis der neue Modus uebernommen wurde
 261:mcp2515.c     **** 		}
 262:mcp2515.c     **** 		
 263:mcp2515.c     **** 		return true;
 402               		.loc 1 263 0
 403 00c2 81E0      		ldi r24,lo8(1)
 404               	.LVL47:
 405               	.L5:
 406               	/* epilogue start */
 264:mcp2515.c     **** 	}
 265:mcp2515.c     **** }
 407               		.loc 1 265 0
 408 00c4 CDB7      		in r28,__SP_L__
 409 00c6 DEB7      		in r29,__SP_H__
 410 00c8 E6E0      		ldi r30, lo8(6)
 411 00ca 0C94 0000 		jmp __epilogue_restores__ + ((18 - 6) * 2)
 412               	.L6:
 175:mcp2515.c     **** 	
 413               		.loc 1 175 0
 414 00ce 80E0      		ldi r24,0
 415 00d0 00C0      		rjmp .L5
 416               		.cfi_endproc
 417               	.LFE23:
 419               	.global	_mcp2515_cnf
 420               		.section	.progmem.data._mcp2515_cnf,"a",@progbits
 423               	_mcp2515_cnf:
 424 0000 04        		.byte	4
 425 0001 B6        		.byte	-74
 426 0002 E7        		.byte	-25
 427 0003 04        		.byte	4
 428 0004 B6        		.byte	-74
 429 0005 D3        		.byte	-45
 430 0006 04        		.byte	4
 431 0007 B6        		.byte	-74
 432 0008 C7        		.byte	-57
 433 0009 04        		.byte	4
 434 000a B6        		.byte	-74
 435 000b C3        		.byte	-61
 436 000c 02        		.byte	2
 437 000d 90        		.byte	-112
 438 000e 07        		.byte	7
 439 000f 03        		.byte	3
 440 0010 AC        		.byte	-84
 441 0011 81        		.byte	-127
 442 0012 03        		.byte	3
 443 0013 AC        		.byte	-84
 444 0014 80        		.byte	-128
 445 0015 02        		.byte	2
 446 0016 90        		.byte	-112
 447 0017 00        		.byte	0
 448               		.text
 449               	.Letext0:
 450               		.file 3 "/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-ardui
 451               		.file 4 "../can.h"
 452               		.file 5 "/home/joaoantoniocardoso/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-ardui
 453               		.file 6 "spi.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 mcp2515.c
     /tmp/ccv3xwIV.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccv3xwIV.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccv3xwIV.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccv3xwIV.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccv3xwIV.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccv3xwIV.s:13     .text.mcp2515_write_register:0000000000000000 mcp2515_write_register
     /tmp/ccv3xwIV.s:63     .text.mcp2515_read_register:0000000000000000 mcp2515_read_register
     /tmp/ccv3xwIV.s:105    .text.mcp2515_bit_modify:0000000000000000 mcp2515_bit_modify
     /tmp/ccv3xwIV.s:165    .text.mcp2515_read_status:0000000000000000 mcp2515_read_status
     /tmp/ccv3xwIV.s:194    .text.can_init:0000000000000000 can_init
     /tmp/ccv3xwIV.s:423    .progmem.data._mcp2515_cnf:0000000000000000 _mcp2515_cnf

UNDEFINED SYMBOLS
spi_putc
mcp2515_spi_init
__epilogue_restores__
